apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'


description "RJcenter"
version "1.1.0"

println "------------------------------"
println project
println name
println path
println description
println projectDir
println buildDir
println group
println version
println ant
println "------------------------------"

//------------------------------
//        project ':sample'
//sample
//:sample
//RJcenter
//F:\AsDemo\RJcenter\sample
//F:\AsDemo\RJcenter\sample\build
//RJcenter
//1.1.0
//org.gradle.api.internal.project.DefaultAntBuilder@6a256fc
//------------------------------


repositories {
    println "in a closure 1"
}
repositories() { println "in a closure 2" }
repositories({ println "in a closure 3" })
println "------------------------------"


def oh = { msg ->
    println(buildTime() + "--> " + msg)
}

android {
    compileSdkVersion Integer.parseInt(rootProject.R_COMPILE_SDK_VERSION)
    buildToolsVersion rootProject.R_BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId "com.angcyo.sample"
        minSdkVersion Integer.parseInt(R_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(R_TARGET_SDK_VERSION)
        versionCode 10
        versionName "1.3.0 beta"

        resValue "string", "build_time", buildTime()
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "java_version", javaVersion()
        resValue "string", "os_name", osName()
    }
    signingConfigs {
        config {
            keyAlias 'angcyo'
            keyPassword 'angcyo'
            storeFile file('F:/angcyo/angcyo.jks')
            storePassword 'angcyo'
        }
    }
    buildTypes {
        // minifyEnabled 混淆处理
        // shrinkResources 去除无用资源
        // signingConfig 签名
        // proguardFiles 混淆配置
        // applicationIdSuffix 增加APP ID的后缀
        // debuggable 是否保留调试信息
        // ... ...
        release {
            manifestPlaceholders = [app_name: "@string/app_name_release"]
            buildConfigField "String", "buildType", "\"${name}\""
//            applicationIdSuffix ".release"
            minifyEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            buildConfigField "String", "buildType", "\"${name}\""
            manifestPlaceholders = [app_name: "@string/app_name_debug"]
//            applicationIdSuffix ".debug"
            minifyEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            pseudoLocalesEnabled false
        }
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }
    dexOptions {
        preDexLibraries = false
        jumboMode = true
        incremental true
        javaMaxHeapSize "4g"
    }
    getApplicationVariants().all { variant ->
        variant.outputs.each { output ->
            def time
            if (!variant.buildType.name.equalsIgnoreCase("debug")) {
                time = "." + getTime()
            } else {
                time = ""
            }
            output.outputFile = new File(output.outputFile.parent,
                    "RJcenter-${variant?.productFlavors[0]?.name}-${variant.buildType.name}-${variant.versionName}${time}.apk")
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }
    //${variant.productFlavors[0].name}
    compileOptions {
        encoding "UTF-8"
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

//    useLibrary 'org.apache.http.legacy'
}

dependencies {
    compile(name: 'aaaa-1.0', ext: 'aar')
    //    compile 'com.angcyo:L:1.1.0'
    //    compile 'com.rsen:rsen:0.0.1'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':rsen')
    testCompile 'junit:junit:4.12'
    //    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.cocosw:query:0.2.2'
    compile 'com.android.support:support-v4:23.3.0'
}

task javadocs(type: Javadoc) {
    oh "javadocs  --start"

    source = android.sourceSets.main.java.srcDirs
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    options {
        encoding "UTF-8"
        charSet "UTF-8"
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title "HKCloud_Studio"
    }

    oh "javadocs  --end"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Xlint:unchecked"
}


def getTime() {
//    return new Date().format("yyyy-MM-dd")
    return new Date().format("HHmmss")
}

def buildTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss.sss")
}

def hostName() {
    return System.getProperty("user.home").replaceAll("\\\\", "\\\\\\\\") + " @ " + System.getProperty("user.name") + " @ " + InetAddress.localHost.hostName
}

def osName() {
    return System.getProperty("os.name") + " @ " + System.getProperty("os.version") + " @ " + System.getProperty("sun.cpu.isalist")
}

def javaVersion() {
    return System.getProperty("java.home").replaceAll("\\\\", "\\\\\\\\") + " @ " + System.getProperty("java.version")
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        // 需要配置git.exe 的系统环境变量
        commandLine 'D:\\Git\\bin\\git.exe', '--version'
//        commandLine 'cmd'
        standardOutput = code
    }
    return code.toString()
}

oh "--------------------end"
